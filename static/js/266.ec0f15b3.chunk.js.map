{"version":3,"file":"static/js/266.ec0f15b3.chunk.js","mappings":"uRAEMA,EAAW,8BACXC,EAAU,mCAEHC,EAAiB,mCAAG,6GAENC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,wBAA6C,CAClEI,OAAQ,CACNC,QAASJ,EACTK,SAAU,WALe,cAEvBC,EAFuB,yBAStBA,EAASC,KAAKC,SATQ,sCAW7BC,QAAQC,MAAR,MAX6B,8DAAH,qDAgBjBC,EAAe,mCAAG,WAAMC,GAAN,gGAEJV,EAAAA,EAAAA,IAAA,UAAaH,EAAb,mBAAgCa,GAAW,CAChET,OAAQ,CACNC,QAASJ,EACTK,SAAU,WALa,cAErBC,EAFqB,yBASpBA,GAToB,sCAW3BG,QAAQC,MAAR,MAX2B,8DAAH,sDAgBfG,EAAkB,mCAAG,WAAOD,EAASE,GAAhB,gGAEPZ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,mBACCa,EADD,YACYE,GACjC,CACEX,OAAQ,CACNC,QAASJ,EACTK,SAAU,WAPc,cAExBC,EAFwB,yBAYvBA,GAZuB,sCAc9BG,QAAQC,MAAR,MAd8B,8DAAH,wDAmBlBK,EAAqB,mCAAG,WAAMC,GAAN,gGAEVd,EAAAA,EAAAA,IAAA,UAAaH,EAAb,kBAAuC,CAC5DI,OAAQ,CACNC,QAASJ,EACTK,SAAU,QACVY,MAAOD,KANsB,cAE3BV,EAF2B,yBAU1BA,GAV0B,sCAYjCG,QAAQC,MAAR,MAZiC,8DAAH,qD,8ECnD5BQ,GAAeC,EAAAA,EAAAA,OAAK,kBACxB,4BADwB,IA8B1B,UA1Ba,WACX,OAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA4CF,EAAAA,EAAAA,UAAS,IAArD,eAAOG,EAAP,KAAuBC,EAAvB,KACA,GAAkCJ,EAAAA,EAAAA,UAAS,MAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACRL,GAAa,IACbrB,EAAAA,EAAAA,MACG2B,MAAK,SAAApB,GAAO,OAAIgB,EAAkBhB,EAAtB,IACZqB,OAAM,SAAAnB,GACLgB,EAAahB,GACbD,QAAQqB,IAAIL,EACb,IACAM,SAAQ,WACPT,GAAa,EACd,GACJ,GAAE,CAACG,KAGF,gCACGJ,IAAa,SAAC,IAAD,IACbE,EAAeS,OAAS,IAAK,SAACd,EAAD,CAAce,OAAQV,MAGzD,C","sources":["API.js","pages/Home.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/';\nconst API_KEY = 'aa97bd548ce602c0ddc0d918fd61fca9';\n\nexport const getTrendingMovies = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}3/trending/movie/day`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nexport const getMovieDetails = async movieId => {\n  try {\n    const response = await axios.get(`${BASE_URL}3/movie/${movieId}`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n\n    return response;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nexport const getMoreInformation = async (movieId, infotype) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}3/movie/${movieId}/${infotype}`,\n      {\n        params: {\n          api_key: API_KEY,\n          language: 'en-US',\n        },\n      }\n    );\n\n    return response;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nexport const searchMovieByKeywords = async movieKeyword => {\n  try {\n    const response = await axios.get(`${BASE_URL}3/search/movie`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        query: movieKeyword,\n      },\n    });\n\n    return response;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n","import { getTrendingMovies } from 'API';\nimport { useEffect, useState } from 'react';\nimport { Loader } from 'components/Loader/Loader';\nimport { lazy } from 'react';\n\nconst MovieGallery = lazy(() =>\n  import('../components/MovieGallery/MovieGallery')\n);\n\nconst Home = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [errorType, setErrorType] = useState(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTrendingMovies()\n      .then(results => setTrendingMovies(results))\n      .catch(error => {\n        setErrorType(error);\n        console.log(errorType);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [errorType]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {trendingMovies.length > 0 && <MovieGallery movies={trendingMovies} />}\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["BASE_URL","API_KEY","getTrendingMovies","axios","params","api_key","language","response","data","results","console","error","getMovieDetails","movieId","getMoreInformation","infotype","searchMovieByKeywords","movieKeyword","query","MovieGallery","lazy","useState","isLoading","setIsLoading","trendingMovies","setTrendingMovies","errorType","setErrorType","useEffect","then","catch","log","finally","length","movies"],"sourceRoot":""}